name: ci

on:
  push:
    branches: [master]
  release:
    types: [created]
  pull_request:
    branches: [master]

# Declare default permissions as read only.
permissions: read-all

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    permissions:
      packages: write
      contents: read
      pull-requests: write
    outputs:
      image-tags: ${{ steps.container_meta.outputs.tags }}
      image-version: ${{ steps.container_meta.outputs.version }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Container meta
        id: container_meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4
        with:
          images: |
            ghcr.io/${{ github.repository }}

      - name: Container meta for the unit test image
        id: container_tests_meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4
        with:
          images: |
            ghcr.io/${{ github.repository }}-tests

      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@885d1462b80bc1c1c7f0b00334ad271f09369c55 # v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ran first to avoid pushing failing images when running on master.
      - name: Run unit tests
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3
        with:
          push: false
          load: true
          tags: ${{ steps.container_tests_meta.outputs.tags }}
          labels: ${{ steps.container_tests_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: test

      - name: Copy unit test coverage reports from container
        env:
          UNIT_TEST_IMAGE: ${{ fromJson(steps.container_tests_meta.outputs.json).tags[0] }}
        run: |
          docker create --name=unit-test-container "${UNIT_TEST_IMAGE}"
          docker cp unit-test-container:/build/src/FhirPseudonymizer.Tests/coverage ./coverage

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@51cc3a756ddcd398d447c044c02cb6aa83fdae95 # tag=v1.3.0
        with:
          filename: coverage/**/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: true
          indicators: true
          output: both
          thresholds: "50 50"

      - name: Get platforms to build
        id: platforms
        run: |
          if [ "$IS_PULL_REQUEST" == "true" ]; then
            echo "{platforms}={linux/amd64}" >> "$GITHUB_OUTPUT"
          else
            # echo "{platforms}={linux/amd64,linux/arm64,linux/arm/v7}" >> "$GITHUB_OUTPUT"
            # disabled multi-arch builds for now due to
            # Error: buildx failed with: ERROR: failed to solve: mcr.microsoft.com/dotnet/nightly/aspnet:6.0.9-jammy-chiseled@sha256:e5288b0e7f80b278d8baa15e9f444ccb4cc0cd4caa6e9cc87782cbd2a3805a49:
            # no match for platform in manifest sha256:e5288b0e7f80b278d8baa15e9f444ccb4cc0cd4caa6e9cc87782cbd2a3805a49: not found
            echo "{platforms}={linux/amd64}" >> "$GITHUB_OUTPUT"
          fi
        env:
          IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@1104d471370f9806843c095c1db02b5a90c5f8b6 # v3
        with:
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.container_meta.outputs.tags }}
          labels: ${{ steps.container_meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: ${{ steps.platforms.outputs.platforms }}

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@efaaab3fd41a9c3de579aba759d2552635e590fd # v2.8.0
        if: ${{ github.event_name == 'pull_request' }}
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Save container image as tar archives
        if: ${{ github.event_name == 'pull_request' }}
        env:
          IMAGE: ${{ fromJson(steps.container_meta.outputs.json).tags[0] }}
        run: |
          docker save "$IMAGE" -o /tmp/image.tar

      - name: Upload container image
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: container-image
          path: |
            /tmp/image.tar

  run-iter8-tests:
    name: run iter8 tests
    runs-on: ubuntu-22.04
    # ${{ github.event_name == 'pull_request' }}
    # disabled for now since iter8 action doesn't really work anymore
    # TODO: migrate to <https://iter8.tools/0.18/tutorials/integrations/ghactions/> instead.
    if: ${{ false }}
    needs:
      - build
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3

      - uses: iter8-tools/iter8@bf13530586a447220caccf71fae506350b47fd75 # v0.18.4

      - name: Create KinD cluster
        uses: helm/kind-action@dda0770415bac9fc20092cacbc54aa298604d140 # v1.8.0
        with:
          cluster_name: kind

      - name: Download container images
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: container-image
          path: /tmp

      - name: Load image into KinD
        run: |
          kind load image-archive /tmp/image.tar

      - name: List images in cluster
        run: docker exec kind-control-plane crictl images

      - name: Install the latest version of vfps as a pseudonymization service
        run: |
          helm repo add chgl https://chgl.github.io/charts
          helm install \
            --wait \
            --timeout=10m \
            vfps chgl/vfps

      - name: Install "fhir-pseudonymizer"
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image-version }}
        run: |
          helm repo add miracum https://miracum.github.io/charts
          helm install \
            --set="image.tag=${IMAGE_TAG}" \
            -f tests/iter8/values.yaml \
            --wait \
            --timeout=10m \
            fhir-pseudonymizer miracum/fhir-pseudonymizer

      - name: Launch iter8 experiment
        run: kubectl apply -f tests/iter8/experiment.yaml

      - name: Wait for experiment completion
        run: iter8 k assert -c completed --timeout 10m

      - name: Assert no failures and SLOs are satisfied
        run: iter8 k assert -c nofailure,slos

      - name: Create iter8 reports
        if: always()
        run: |
          iter8 k report | tee iter8-report.txt
          iter8 k report -o html > iter8-report.html

      - name: Enhance iter8 report output for use as a PR comment
        run: |
          ITER8_REPORT_TXT=$(cat iter8-report.txt)
          {
            echo -e '---';
            echo -e '## iter8 report';
            echo -e '```console';
            echo -e "${ITER8_REPORT_TXT}";
            echo -e '```'
          } >> iter8-output.md

      - name: Append sticky comment with iter8 report
        uses: marocchino/sticky-pull-request-comment@efaaab3fd41a9c3de579aba759d2552635e590fd # v2.8.0
        if: ${{ github.event_name == 'pull_request' }}
        with:
          append: true
          path: iter8-output.md

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: iter8-report.html
          path: |
            iter8-report.html

      - name: Print cluster and iter8 logs
        if: always()
        run: |
          kubectl cluster-info dump -o yaml | tee kind-cluster-dump.txt
          iter8 k log -l trace

      - name: Upload cluster dump
        if: always()
        uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32 # v3.1.3
        with:
          name: kind-cluster-dump.txt
          path: |
            kind-cluster-dump.txt

  release:
    needs: build
    name: Release
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      pull-requests: write
    if: ${{ github.event_name != 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          # via <https://stackoverflow.com/questions/74744498/github-pushing-to-protected-branches-with-fine-grained-token/76550826#76550826>
          persist-credentials: false

      # Only required temporary: https://github.com/cycjimmy/semantic-release-action/issues/159
      - uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d # v3.8.1
        with:
          node-version: 14

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@8e58d20d0f6c8773181f43eb74d6a05e3099571d # v3.4.2
        with:
          extra_plugins: |
            conventional-changelog-conventionalcommits@5.0.0
            semantic-release-replace-plugin@1.2.0
            @semantic-release/git@10.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

  container-provenance:
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs:
      - build
    permissions:
      actions: read # for detecting the Github Actions environment.
      id-token: write
      packages: write # for uploading attestations.
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
    with:
      image: ghcr.io/${{ github.repository }}
      digest: ${{ needs.build.outputs.image-digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}

  sign-images:
    name: sign images
    runs-on: ubuntu-22.04
    if: ${{ github.event_name != 'pull_request' }}
    needs:
      - build
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@11086d25041f77fe8fe7b9ea4e48e3b9192b8f19 # v3.1.2

      # via <https://github.com/actions/starter-workflows/blob/main/ci/docker-publish.yml>
      - name: Sign image
        env:
          # <https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable>
          TAGS: ${{ needs.build.outputs.image-tags }}
          DIGEST: ${{ needs.build.outputs.image-digest }}
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@"${DIGEST}"
